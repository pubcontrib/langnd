#!/usr/local/bin/langnd

import ["read", "evaluate", "get"] from core

$testing = $evaluate($read("testing.txt", null))
$returns = $get($testing, "returns")
$throws = $get($testing, "throws")

$returns(<import "divide" from core $divide(1, 2)>, 0)
$returns(<import "divide" from core $divide(123, 456)>, 0)
$returns(<import "divide" from core $divide(-1, -2)>, 0)
$returns(<import "divide" from core $divide(-123, -456)>, 0)
$returns(<import "divide" from core $divide(0.1, 0.2)>, 0.499954)
$returns(<import "divide" from core $divide(0.123, 0.456)>, 0.269699)
$returns(<import "divide" from core $divide(-0.1, -0.2)>, 0.499954)
$returns(<import "divide" from core $divide(-0.123, -0.456)>, 0.269699)
$returns(<import "divide" from core $divide(123.456, 123.456)>, 1.0)
$returns(<import "divide" from core $divide(-123.456, -123.456)>, 1.0)

$throws(<import "divide" from core $divide(1, 1.0)>, "arithmetic error")
$throws(<import "divide" from core $divide(1.0, 1)>, "arithmetic error")
$throws(<import "divide" from core $divide(100, 0)>, "arithmetic error")
$throws(<import "divide" from core $divide(32767.0, 0.5)>, "arithmetic error")
$throws(<import "divide" from core $divide(-32767.0, -0.5)>, "arithmetic error")
$throws(<import "divide" from core $divide(32767.0, -0.5)>, "arithmetic error")
$throws(<import "divide" from core $divide(-32767.0, 0.5)>, "arithmetic error")
$throws(<import "divide" from core $divide(100.0, 0.0)>, "arithmetic error")

$throws(<import "divide" from core $divide(null)>, "alien argument")
$throws(<import "divide" from core $divide(null, null)>, "alien argument")
$throws(<import "divide" from core $divide(null, false)>, "alien argument")
$throws(<import "divide" from core $divide(null, 0)>, "alien argument")
$throws(<import "divide" from core $divide(null, "")>, "alien argument")
$throws(<import "divide" from core $divide(null, [])>, "alien argument")
$throws(<import "divide" from core $divide(null, {})>, "alien argument")
$throws(<import "divide" from core $divide(null, <>)>, "alien argument")
$throws(<import "divide" from core $divide(false)>, "alien argument")
$throws(<import "divide" from core $divide(false, null)>, "alien argument")
$throws(<import "divide" from core $divide(false, false)>, "alien argument")
$throws(<import "divide" from core $divide(false, 0)>, "alien argument")
$throws(<import "divide" from core $divide(false, "")>, "alien argument")
$throws(<import "divide" from core $divide(false, [])>, "alien argument")
$throws(<import "divide" from core $divide(false, {})>, "alien argument")
$throws(<import "divide" from core $divide(false, <>)>, "alien argument")
$throws(<import "divide" from core $divide(0)>, "absent argument")
$throws(<import "divide" from core $divide(0, null)>, "alien argument")
$throws(<import "divide" from core $divide(0, false)>, "alien argument")
$throws(<import "divide" from core $divide(0, "")>, "alien argument")
$throws(<import "divide" from core $divide(0, [])>, "alien argument")
$throws(<import "divide" from core $divide(0, {})>, "alien argument")
$throws(<import "divide" from core $divide(0, <>)>, "alien argument")
$throws(<import "divide" from core $divide("")>, "alien argument")
$throws(<import "divide" from core $divide("", null)>, "alien argument")
$throws(<import "divide" from core $divide("", false)>, "alien argument")
$throws(<import "divide" from core $divide("", 0)>, "alien argument")
$throws(<import "divide" from core $divide("", "")>, "alien argument")
$throws(<import "divide" from core $divide("", [])>, "alien argument")
$throws(<import "divide" from core $divide("", {})>, "alien argument")
$throws(<import "divide" from core $divide("", <>)>, "alien argument")
$throws(<import "divide" from core $divide([])>, "alien argument")
$throws(<import "divide" from core $divide([], null)>, "alien argument")
$throws(<import "divide" from core $divide([], false)>, "alien argument")
$throws(<import "divide" from core $divide([], 0)>, "alien argument")
$throws(<import "divide" from core $divide([], "")>, "alien argument")
$throws(<import "divide" from core $divide([], [])>, "alien argument")
$throws(<import "divide" from core $divide([], {})>, "alien argument")
$throws(<import "divide" from core $divide([], <>)>, "alien argument")
$throws(<import "divide" from core $divide({})>, "alien argument")
$throws(<import "divide" from core $divide({}, null)>, "alien argument")
$throws(<import "divide" from core $divide({}, false)>, "alien argument")
$throws(<import "divide" from core $divide({}, 0)>, "alien argument")
$throws(<import "divide" from core $divide({}, "")>, "alien argument")
$throws(<import "divide" from core $divide({}, [])>, "alien argument")
$throws(<import "divide" from core $divide({}, {})>, "alien argument")
$throws(<import "divide" from core $divide({}, <>)>, "alien argument")
$throws(<import "divide" from core $divide(<>)>, "alien argument")
$throws(<import "divide" from core $divide(<>, null)>, "alien argument")
$throws(<import "divide" from core $divide(<>, false)>, "alien argument")
$throws(<import "divide" from core $divide(<>, 0)>, "alien argument")
$throws(<import "divide" from core $divide(<>, "")>, "alien argument")
$throws(<import "divide" from core $divide(<>, [])>, "alien argument")
$throws(<import "divide" from core $divide(<>, {})>, "alien argument")
$throws(<import "divide" from core $divide(<>, <>)>, "alien argument")
