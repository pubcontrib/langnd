#!/usr/local/bin/langnd

$returns =
<
  # tests if a function returns an expected value

  $do = argument
  $expected = argument

  import ["equals", "not"] from core

  $returned = null

  $thrown = catch
  \
    $returned = $do()
  /

  if $not($equals($thrown, null))
  \
    import ["set", "freeze"] from core

    $error = {}
    $error = $set($error, "reason", "an unexpected error was thrown")
    $error = $set($error, "thrown", $thrown)
    $error = $set($error, "source", $freeze($do))

    throw $error
  /

  if $not($equals($returned, $expected))
  \
    import ["set", "freeze"] from core

    $error = {}
    $error = $set($error, "reason", "an unexpected value was returned")
    $error = $set($error, "actual", $returned)
    $error = $set($error, "expected", $expected)
    $error = $set($error, "source", $freeze($do))

    throw $error
  /
>

$throws =
<
  # tests if a function throws an expected value

  $do = argument
  $expected = argument

  import ["equals", "not"] from core

  $returned = null

  $thrown = catch
  \
    $returned = $do()
  /

  if $not($equals($returned, null))
  \
    import ["set", "freeze"] from core

    $error = {}
    $error = $set($error, "reason", "an expected error was not thrown")
    $error = $set($error, "returned", $returned)
    $error = $set($error, "source", $freeze($do))

    throw $error
  /

  if $not($equals($thrown, $expected))
  \
    import ["set", "freeze"] from core

    $error = {}
    $error = $set($error, "reason", "an unexpected error was thrown")
    $error = $set($error, "actual", $thrown)
    $error = $set($error, "expected", $expected)
    $error = $set($error, "source", $freeze($do))

    throw $error
  /
>

$lexFails =
<
  # tests if source fails the lexer

  $source = argument
  $hint = argument

  import ["equals", "not", "evaluate", "set"] from core

  $returned = null

  $thrown = catch
  \
    $returned = $evaluate($source)
  /

  if $not($equals($returned, null))
  \
    import "freeze" from core

    $error = {}
    $error = $set($error, "reason", "an expected error was not thrown")
    $error = $set($error, "returned", $returned)
    $error = $set($error, "source", $source)

    throw $error
  /

  $expected = {}
  $expected = $set($expected, "message", "failed to lex code")
  $expected = $set($expected, "hint", $hint)

  if $not($equals($thrown, $expected))
  \
    import "freeze" from core

    $error = {}
    $error = $set($error, "reason", "an unexpected error was thrown")
    $error = $set($error, "actual", $thrown)
    $error = $set($error, "expected", $expected)
    $error = $set($error, "source", $source)

    throw $error
  /
>

$parseFails =
<
  # tests if source fails the parser

  $source = argument
  $hint = argument

  import ["equals", "not", "evaluate", "set"] from core

  $returned = null

  $thrown = catch
  \
    $returned = $evaluate($source)
  /

  if $not($equals($returned, null))
  \
    import "freeze" from core

    $error = {}
    $error = $set($error, "reason", "an expected error was not thrown")
    $error = $set($error, "returned", $returned)
    $error = $set($error, "source", $source)

    throw $error
  /

  $expected = {}
  $expected = $set($expected, "message", "failed to parse code")
  $expected = $set($expected, "hint", $hint)

  if $not($equals($thrown, $expected))
  \
    import "freeze" from core

    $error = {}
    $error = $set($error, "reason", "an unexpected error was thrown")
    $error = $set($error, "actual", $thrown)
    $error = $set($error, "expected", $expected)
    $error = $set($error, "source", $source)

    throw $error
  /
>

$writeDetail =
<
  # write a detailed message with optional style

  $header = argument
  $message = argument
  $color = argument

  import "write" from core

  if $color
  \
    $write("\a027[1m", 2)
    $write($header, 2)
    $write(":\a027[0m\n", 2)
  /
  otherwise
  \
    $write($header, 2)
    $write(":\n", 2)
  /

  $write($message, 2)
  $write("\n", 2)
>

$writeStatus =
<
  # write a status with optional style

  $status = argument
  $color = argument
  $code = argument

  import ["write", "cast", "precedes", "succeeds", "or"] from core

  if $or($precedes($code, 30), $succeeds($code, 37))
  \
    throw "alien color code"
  /

  if $color
  \
    $write("\a027[7;", 2)
    $write($cast($code, "STRING"), 2)
    $write("m ", 2)
    $write($status, 2)
    $write(" \a027[0m\n", 2)
  /
  otherwise
  \
    $write("[", 2)
    $write($status, 2)
    $write("]\n", 2)
  /
>

$supportsEnvironmentFlag =
<
  # checks if an environment flag is set

  $name = argument

  import ["query", "equals", "not", "type"] from core

  $error = catch
  \
    return $equals($query($name), "")
  /

  if $equals($type($error), "STRING")
  \
    if $equals($error, "absent environment variable")
    \
      return true
    /
    otherwise
    \
      throw $error
    /
  /
  else if $equals($type($error), "NULL")
  \
    throw $error
  /
  otherwise
  \
    return true
  /
>

import "set" from core

$module = {}
$module = $set($module, "returns", $returns)
$module = $set($module, "throws", $throws)
$module = $set($module, "lexFails", $lexFails)
$module = $set($module, "parseFails", $parseFails)
$module = $set($module, "writeDetail", $writeDetail)
$module = $set($module, "writeStatus", $writeStatus)
$module = $set($module, "persistence", $supportsEnvironmentFlag("NO_PERSISTENCE"))
$module = $set($module, "color", $supportsEnvironmentFlag("NO_COLOR"))
$module
